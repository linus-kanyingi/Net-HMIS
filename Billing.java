/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.hmis;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author user
 */
public class Billing extends javax.swing.JFrame {
    
     //private JTextField search_lab3;
     //private JTable billing_table;
    public void setPersonaText(String username) {
        persona.setText(username);
    }
    private JTable search_results_table; 
    
// New JTable to display search results

    /**
     * Creates new form Billing
     */
    public Billing() {
        initComponents();
        showData();
        currentDate();
        
             // Create the search_results_table JTable
        search_results_table = new JTable();
        
        // Set up the properties for the search_results_table
        DefaultTableModel searchTableModel = new DefaultTableModel();
        String[] columnNames = {"Code", "Test", "Fee", "Time", "Bench"};
        searchTableModel.setColumnIdentifiers(columnNames);
        search_results_table.setModel(searchTableModel);
        
        // Add a mouse listener to the search_results_table
        search_results_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billing_search_tableMouseClicked(evt);
            }
        });
        
        // Add the search_results_table to the existing JFrame with GridBagLayout
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        
        jPanel7.setLayout(new GridBagLayout());
        jPanel7.add(new JScrollPane(search_results_table), gbc);

    
    }
    
    public void currentDate() {
    Calendar cal = new GregorianCalendar();
    int month = cal.get(Calendar.MONTH) + 1;
    int year = cal.get(Calendar.YEAR);
    int day = cal.get(Calendar.DAY_OF_MONTH);

    date_txt.setText(day+ "/" + month + "/" + year);

    int second = cal.get(Calendar.SECOND);
    int minute = cal.get(Calendar.MINUTE);
    int hour = cal.get(Calendar.HOUR_OF_DAY);

    time_txt.setText(hour + "." + minute + "." + second);
}

    public void showData(){
        try{
            Class.forName("org.postgresql.Driver");
            java.sql.Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres","postgres","kanyingi254");
            Statement st = conn.createStatement();
            String query = "select * from patient_details";
            ResultSet rs = st.executeQuery(query);
            billing_patients.setModel(DbUtils.resultSetToTableModel(rs));
            
            rs.close();
           st.close();
           conn.close();
            
            
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex);
        }
    }
    
    
    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        search_lab4 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        billing_patients = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        receipt_no = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        phone_no = new javax.swing.JTextField();
        pay_mode = new javax.swing.JTextField();
        date_txt = new javax.swing.JLabel();
        time_txt = new javax.swing.JLabel();
        pat_no_txt = new javax.swing.JTextField();
        pat_name_txt = new javax.swing.JTextField();
        persona = new javax.swing.JLabel();
        shift_no = new javax.swing.JTextField();
        search_lab2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        billing_table = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        search_lab3 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Search For Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel4.add(jLabel3, gridBagConstraints);

        search_lab4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_lab4KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel4.add(search_lab4, gridBagConstraints);

        billing_patients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient No", "Patient Name", "Urgency", "Age", "Clinic", "Arrival Time", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billing_patients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billing_patientsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(billing_patients);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel4.add(jScrollPane3, gridBagConstraints);

        jTabbedPane1.addTab("Occupancy", jPanel4);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        receipt_no.setBorder(javax.swing.BorderFactory.createTitledBorder("Receipt Number"));
        receipt_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receipt_noActionPerformed(evt);
            }
        });
        receipt_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                receipt_noKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(receipt_no, gridBagConstraints);

        jLabel1.setText("Search For Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jLabel1, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButton3.setText("Patient Card");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(jButton3, gridBagConstraints);

        phone_no.setEditable(false);
        phone_no.setBorder(javax.swing.BorderFactory.createTitledBorder("Phone Number"));
        phone_no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phone_noActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(phone_no, gridBagConstraints);

        pay_mode.setEditable(false);
        pay_mode.setBorder(javax.swing.BorderFactory.createTitledBorder("Payment Mode"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(pay_mode, gridBagConstraints);

        date_txt.setBorder(javax.swing.BorderFactory.createTitledBorder("Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(date_txt, gridBagConstraints);

        time_txt.setBorder(javax.swing.BorderFactory.createTitledBorder("Time"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(time_txt, gridBagConstraints);

        pat_no_txt.setEditable(false);
        pat_no_txt.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Number"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(pat_no_txt, gridBagConstraints);

        pat_name_txt.setEditable(false);
        pat_name_txt.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Name"));
        pat_name_txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pat_name_txtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(pat_name_txt, gridBagConstraints);

        persona.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(persona, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        shift_no.setBorder(javax.swing.BorderFactory.createTitledBorder("Shift Number"));
        shift_no.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                shift_noKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(shift_no, gridBagConstraints);

        search_lab2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_lab2KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(search_lab2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Print Receipts");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setText("Save Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(jButton2, gridBagConstraints);

        jButton4.setText("Remove Row");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel3.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel3, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Bill Service"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        billing_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Code", "Service", "Fee", "Time"
            }
        ));
        jScrollPane1.setViewportView(billing_table);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel2.setText("Search For Service");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel2, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        search_lab3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_lab3ActionPerformed(evt);
            }
        });
        search_lab3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                search_lab3KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel7.add(search_lab3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Bill Patient", jPanel5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        jMenu6.setText("Setup");

        jMenu7.setText("Staff Registry");

        jMenuItem8.setText("Add User");
        jMenu7.add(jMenuItem8);

        jMenuItem9.setText("Edit User");
        jMenu7.add(jMenuItem9);

        jMenu6.add(jMenu7);

        jMenu8.setText("Operating Parameters");

        jMenuItem10.setText("Pharmacy");
        jMenu8.add(jMenuItem10);

        jMenu9.setText("Laboratory");
        jMenu8.add(jMenu9);

        jMenu6.add(jMenu8);

        jMenu10.setText("Exit");
        jMenu6.add(jMenu10);

        jMenuBar1.add(jMenu6);

        jMenu1.setText("Registration");

        jMenuItem2.setText("Out Patient Registration");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Nursing");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Clinical");
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Laboratory");

        jMenuItem7.setText("Laboratory LIMS");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuBar1.add(jMenu4);

        jMenu11.setText("Billing");
        jMenu11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu11ActionPerformed(evt);
            }
        });

        jMenuItem11.setText("Cash Sale POS");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem11);

        jMenuItem12.setText("Dispense Drugs");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem12);

        jMenuBar1.add(jMenu11);

        jMenu5.setText("Reports");

        jMenuItem5.setText("Patient Card");
        jMenu5.add(jMenuItem5);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Clerking rgf = new Clerking();
        rgf.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        dispose();
        new lab().setVisible(true);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        dispose();
        new dispense().setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void receipt_noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receipt_noKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_receipt_noKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String path = "";
        JFileChooser j = new JFileChooser();
        j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int x = j.showOpenDialog(this);

        if (x == JFileChooser.APPROVE_OPTION) {
            path = j.getSelectedFile().getPath();
        }

        int rowIndex = billing_patients.getSelectedRow();

        if (rowIndex != -1) {
            String Number = billing_patients.getValueAt(rowIndex, 0).toString();
            String Name = billing_patients.getValueAt(rowIndex, 1).toString();
            String Urgency = billing_patients.getValueAt(rowIndex, 2).toString();
            String Age = billing_patients.getValueAt(rowIndex, 3).toString();
            String Clinic = billing_patients.getValueAt(rowIndex, 4).toString();
            String Time = billing_patients.getValueAt(rowIndex, 5).toString();
            String Date = billing_patients.getValueAt(rowIndex, 6).toString();

            Document doc = new Document();

            try {
                // Save the PDF file with the patient number as the file name
                PdfWriter.getInstance(doc, new FileOutputStream(path + File.separator + Number + ".pdf"));

                // Add header with logo and text
                Paragraph header = new Paragraph();
                // Add logo
                Image logo = Image.getInstance("src\\main\\java\\com\\mycompany\\icons\\logo.png");
                logo.scaleAbsolute(100f, 100f);
                logo.setAlignment(Element.ALIGN_CENTER);
                header.add(logo);

                // Add header text
                Paragraph headerText = new Paragraph();
                headerText.add(new Phrase("BUNGOMA WEMA CENTER\n Fashion Place Plaza 2nd Floor, Hospital Road\n Opposite Shariffs Centre Next to County Comfort Hotel\n P.o Box 2270-50200 Bungoma \n Tel: 0726982221 \n Email: wemacentre@gmail.com \n"));
                headerText.setAlignment(Element.ALIGN_CENTER);
                header.add(headerText);

                // Center the header
                header.setAlignment(Element.ALIGN_CENTER);

                // Add header to the document
                doc.open();
                doc.add(header);
                doc.add(new Paragraph("\n")); // Add a blank paragraph

                // Add patient data table
                PdfPTable report = new PdfPTable(new float[] { 1, 2 }); // 2 columns: labels on left, data on right
                report.setWidthPercentage(100f);

                report.addCell("Patient Number");
                report.addCell(Number);
                report.addCell("Patient Name");
                report.addCell(Name);
                report.addCell("Gender");
                report.addCell(Urgency);
                report.addCell("Age");
                report.addCell(Age);
                report.addCell("ID");
                report.addCell(Clinic);
                report.addCell("Residence");
                report.addCell(Time);
                report.addCell("Clinic");
                report.addCell(Date);

                doc.add(report);

                // Add a row with the text "VITAL SIGNS"

                PdfPTable vitalSignsRow = new PdfPTable(1);
                Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                Phrase vitalSignsPhrase = new Phrase("VITAL SIGNS", boldFont);
                vitalSignsRow.addCell(vitalSignsPhrase);
                vitalSignsRow.setWidthPercentage(100f);
                doc.add(vitalSignsRow);

                // Add vital signs data table
                PdfPTable vitalSignsTable = new PdfPTable(new float[] { 1, 1, 5 }); // 3 columns: date, time, vital signs
                vitalSignsTable.setWidthPercentage(100f);

                // Retrieve vital signs data for the selected patient number
                String patNumber = pay_mode.getText();
                String query = "SELECT  height, weight, bmi, systolic, diastolic, temperature, pressure, oxygen_saturation, date, time FROM vitals  WHERE pat_no = ? order by date ASC, time DESC " ;
                try {
                    Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres","postgres","kanyingi254");
                    PreparedStatement pst = conn.prepareStatement(query);
                    pst.setString(1, patNumber);
                    ResultSet rs = pst.executeQuery();

                    // Add the vital signs data to the table
                    while (rs.next()) {
                        String height = rs.getString("height");
                        String weight = rs.getString("weight");
                        String bmi = rs.getString("bmi");
                        String systolic = rs.getString("systolic");
                        String diastolic = rs.getString("diastolic");
                        String temperature = rs.getString("temperature");
                        String pressure = rs.getString("pressure");
                        String oxygenSat = rs.getString("oxygen_saturation");
                        String date = rs.getString("date");
                        String time = rs.getString("time");

                        String vitalSigns = "Height: " + height + ", Weight: " + weight + ", BMI: " + bmi + ", Systolic: " + systolic + ", Diastolic: " + diastolic + ", Temperature: " + temperature + ", Pressure: " + pressure + ", Oxygen Saturation: " + oxygenSat;

                        vitalSignsTable.addCell(date);
                        vitalSignsTable.addCell(time);
                        vitalSignsTable.addCell(vitalSigns);
                    }

                    // Add the vital signs table to the document
                    doc.add(vitalSignsTable);

                    // Add a row with the text "VITAL SIGNS"
                    PdfPTable doctorsNotesLabel = new PdfPTable(1);
                    Font bold = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                    Phrase phrase = new Phrase("DOCTORS NOTES", bold);
                    doctorsNotesLabel.addCell(phrase);
                    doctorsNotesLabel.setWidthPercentage(100f);
                    doc.add(doctorsNotesLabel);

                    // Add doctors notes data table
                    PdfPTable doctorsNotesTable = new PdfPTable(new float[] { 1, 1, 4 }); // 3 columns: date, time, note
                    doctorsNotesTable.setWidthPercentage(100f);

                    // Retrieve doctors notes data for the selected patient number
                    String doctorsNotesQuery = "SELECT history, diagnosis, treatment, date, time FROM public.doc_notes WHERE pat_no = ? ORDER BY date ASC, time DESC";
                    PreparedStatement doctorsNotesPst = conn.prepareStatement(doctorsNotesQuery);
                    doctorsNotesPst.setString(1, patNumber);
                    ResultSet doctorsNotesRs = doctorsNotesPst.executeQuery();

                    // Add the doctors notes data to the table
                    while (doctorsNotesRs.next()) {
                        String history = doctorsNotesRs.getString("history");
                        String diagnosis = doctorsNotesRs.getString("diagnosis");
                        String treatment = doctorsNotesRs.getString("treatment");
                        String date = doctorsNotesRs.getString("date");
                        String time = doctorsNotesRs.getString("time");

                        String note = "History: " + history + "\nDiagnosis: " + diagnosis + "\nTreatment: " + treatment;
                        doctorsNotesTable.addCell(date);
                        doctorsNotesTable.addCell(time);
                        doctorsNotesTable.addCell(note);
                    }

                    // Add the doctors notes table to the document
                    doc.add(doctorsNotesTable);

                    // Add a row with the text "VITAL SIGNS"
                    PdfPTable investigationslabel = new PdfPTable(1);
                    //Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                    Phrase phraseinv = new Phrase("INVESTIGATION", boldFont);
                    investigationslabel.addCell(phraseinv);
                    investigationslabel.setWidthPercentage(100f);
                    doc.add(investigationslabel);

                    // Add doctors notes data table
                    PdfPTable investigations = new PdfPTable(new float[] { 1, 1, 4 }); // 3 columns: date, time, note
                    investigations.setWidthPercentage(100f);

                    // Retrieve doctors notes data for the selected patient number
                    String investigationsQuery = "SELECT  test_requested, date, time FROM public.lab_request WHERE patient_no = ? ORDER BY date ASC, time DESC";
                    PreparedStatement investigationsPst = conn.prepareStatement(investigationsQuery);
                    investigationsPst.setString(1, patNumber);
                    ResultSet investigationsRs = investigationsPst.executeQuery();

                    // Add the doctors notes data to the table
                    while (investigationsRs.next()) {
                        String test = investigationsRs.getString("test_requested");
                        String date = investigationsRs.getString("date");
                        String time = investigationsRs.getString("time");

                        String note = "Investigation: " + test;
                        investigations.addCell(date);
                        investigations.addCell(time);
                        investigations.addCell(note);
                    }

                    // Add the doctors notes table to the document
                    doc.add(investigations);

                    // Add a row with the text "LABORATORY RESULTS"
                    PdfPTable labResultsLabel = new PdfPTable(1);
                    //Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                    Phrase phraseLabResults = new Phrase("LABORATORY RESULTS", boldFont);
                    labResultsLabel.addCell(phraseLabResults);
                    labResultsLabel.setWidthPercentage(100f);
                    doc.add(labResultsLabel);

                    // Add laboratory results data table
                    PdfPTable labResultsTable = new PdfPTable(new float[] { 1, 1, 1, 1, 1 }); // 5 columns: parameter, result, lower limit, upper limit, status
                    labResultsTable.setWidthPercentage(100f);

                    // Retrieve laboratory results data for the selected patient number
                    String labResultsQuery = "SELECT test, parameter, result, lower, upper, unit, verified, date, time FROM public.lab_results WHERE patient_no = ? ORDER BY date ASC, time DESC";
                    PreparedStatement labResultsPst = conn.prepareStatement(labResultsQuery);
                    labResultsPst.setString(1, patNumber);
                    ResultSet labResultsRs = labResultsPst.executeQuery();

                    // Initialize variables to track the current test
                    String currentTest = "";
                    boolean isFirstRow = true;

                    // Declare the verified variable
                    String verified = "";

                    // Add the laboratory results data to the table
                    while (labResultsRs.next()) {
                        String test = labResultsRs.getString("test");
                        String parameter = labResultsRs.getString("parameter");
                        String labResult = labResultsRs.getString("result");
                        String lower = labResultsRs.getString("lower");
                        String upper = labResultsRs.getString("upper");
                        String unit = labResultsRs.getString("unit");
                        String date = labResultsRs.getString("date");
                        String time = labResultsRs.getString("time");

                        // If the test changes, add a new row with the test name in bold
                        if (!test.equals(currentTest)) {
                            if (!isFirstRow) {
                                labResultsTable.completeRow(); // Complete the previous row
                            }

                            // Add a row with the test name
                            PdfPCell testCell = new PdfPCell();
                            testCell.setColspan(5);
                            Phrase testPhrase = new Phrase("PROCEDURE: " + test, boldFont);
                            testCell.addElement(testPhrase);
                            labResultsTable.addCell(testCell);

                            // Add headers for the columns
                            labResultsTable.addCell(new PdfPCell(new Phrase("Parameter", boldFont)));
                            labResultsTable.addCell(new PdfPCell(new Phrase("Result", boldFont)));
                            labResultsTable.addCell(new PdfPCell(new Phrase("Lower Limit", boldFont)));
                            labResultsTable.addCell(new PdfPCell(new Phrase("Upper Limit", boldFont)));
                            labResultsTable.addCell(new PdfPCell(new Phrase("Status", boldFont)));

                            currentTest = test;
                            isFirstRow = false;
                        }

                        // Merge the unit with the result and add it to the table
                        String resultWithUnit = labResult + " " + unit;
                        labResultsTable.addCell(parameter);
                        labResultsTable.addCell(resultWithUnit);
                        labResultsTable.addCell(lower);
                        labResultsTable.addCell(upper);

                        // Check if the result is within the limits
                        boolean isWithinLimits = (Double.parseDouble(labResult) >= Double.parseDouble(lower) && Double.parseDouble(labResult) <= Double.parseDouble(upper));

                        // Set the status cell color based on the result's position relative to the limits
                        PdfPCell statusCell = new PdfPCell();
                        statusCell.setBackgroundColor(isWithinLimits ? BaseColor.GREEN : BaseColor.RED);
                        labResultsTable.addCell(statusCell);

                        // Retrieve the "verified" value
                        verified = labResultsRs.getString("verified");
                    }

                    // Complete the last row if there are any remaining cells
                    if (!isFirstRow) {
                        labResultsTable.completeRow();
                    }

                    // Add the laboratory results table to the document
                    doc.add(labResultsTable);

                    // Add a row with the text "Results Verified By"
                    PdfPTable verifiedByRow = new PdfPTable(1);
                    Phrase verifiedByPhrase = new Phrase();
                    Chunk verifiedByChunk = new Chunk("Results Verified By: ", boldFont);
                    verifiedByChunk.append(verified);
                    verifiedByPhrase.add(verifiedByChunk);
                    verifiedByRow.addCell(verifiedByPhrase);
                    verifiedByRow.setWidthPercentage(100f);
                    doc.add(verifiedByRow);

                    // Add a row with the text "VITAL SIGNS"
                    PdfPTable drugslabel = new PdfPTable(1);
                    //Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);
                    Phrase drugsinv = new Phrase("DRUGS REQUESTED", boldFont);
                    drugslabel.addCell(drugsinv);
                    drugslabel.setWidthPercentage(100f);
                    doc.add(drugslabel);

                    // Add doctors notes data table
                    PdfPTable drugs = new PdfPTable(new float[] { 1, 1, 4 }); // 3 columns: date, time, note
                    drugs.setWidthPercentage(100f); // Set the table width to 100%

                    // Retrieve doctors notes data for the selected patient number
                    String drugsQuery = "SELECT drug,  quantity_requested, strength, date, time, notes FROM public.drugs_requested WHERE pat_no = ? ORDER BY date ASC, time DESC";
                    PreparedStatement drugsPst = conn.prepareStatement(drugsQuery);
                    drugsPst.setString(1, patNumber);
                    ResultSet drugsRs = drugsPst.executeQuery();

                    // Add the doctors notes data to the table
                    while (drugsRs.next()) {
                        String test = drugsRs.getString("drug");
                        String date = drugsRs.getString("date");
                        String time = drugsRs.getString("time");

                        String note = "Drug: " + test;
                        drugs.addCell(date);
                        drugs.addCell(time);
                        drugs.addCell(note);
                    }

                    // Set the number of columns to span for the note column
                    int noteColumnSpan = 3;
                    drugs.getDefaultCell().setColspan(noteColumnSpan);

                    // Add the doctors notes table to the document
                    doc.add(drugs);

                    // Close the database connection
                    conn.close();

                    // Close the document
                    doc.close();

                } catch (SQLException ex) {
                    Logger.getLogger(Clerking.class.getName()).log(Level.SEVERE, null, ex);
                }

                JOptionPane.showMessageDialog(null, "File Downloaded Successfully", "MESSAGE", JOptionPane.INFORMATION_MESSAGE);

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Clerking.class.getName()).log(Level.SEVERE, null, ex);
            } catch (DocumentException ex) {
                Logger.getLogger(Clerking.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Clerking.class.getName()).log(Level.SEVERE, null, ex);
            }

            doc.close();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void phone_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phone_noActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phone_noActionPerformed

    private void pat_name_txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pat_name_txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pat_name_txtActionPerformed

    private void shift_noKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shift_noKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_shift_noKeyReleased

    private void search_lab2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_lab2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_search_lab2KeyReleased

    private DefaultTableModel searchTableModel;
    
    private void search_lab3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_lab3KeyReleased
        // TODO add your handling code here:
        String searchText = search_lab3.getText();

    // Database connection details
    String dbUrl = "jdbc:postgresql://localhost:5432/postgres";
    String username = "postgres";
    String password = "kanyingi254";

    // Create the SQL query with placeholders for dynamic values
    String sql = "SELECT code, test, fee, \"time\", bench " +
                 "FROM public.lab_test " +
                 "WHERE test LIKE ? ";

    try (Connection conn = DriverManager.getConnection(dbUrl, username, password);
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        // Set the parameter values for the placeholders
        stmt.setString(1, "%" + searchText + "%");

        // Execute the query
        ResultSet rs = stmt.executeQuery();

        // Clear the existing data in the search_results_table
        DefaultTableModel searchTableModel = (DefaultTableModel) search_results_table.getModel();
        searchTableModel.setRowCount(0);

        // Populate the search_results_table with the retrieved data
        while (rs.next()) {
            Object[] rowData = new Object[5];
            for (int i = 1; i <= 5; i++) {
                rowData[i - 1] = rs.getObject(i);
            }
            searchTableModel.addRow(rowData);
        }

        // Show or hide the search_results_table based on search results
        if (searchTableModel.getRowCount() > 0) {
            search_results_table.setVisible(true);
        } else {
            search_results_table.setVisible(false);
        }

        // Close the result set and statement
        rs.close();
        stmt.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_search_lab3KeyReleased

   private void billing_search_tableMouseClicked(java.awt.event.MouseEvent evt) {
    // Get the selected row index from the search results table
int rowIndex = search_results_table.getSelectedRow();
    
    // Check if a row is selected
    if (rowIndex != -1) {
        // Get the selected row data from the search_results_table
        Object[] rowData = new Object[search_results_table.getColumnCount()];
        for (int i = 0; i < search_results_table.getColumnCount(); i++) {
            rowData[i] = search_results_table.getValueAt(rowIndex, i);
        }
    
        // Insert the selected row data at the top of the billing_table
        DefaultTableModel billingTableModel = (DefaultTableModel) billing_table.getModel();
        billingTableModel.insertRow(0, rowData);
    
        // Remove the selected row from the search_results_table
        DefaultTableModel searchTableModel = (DefaultTableModel) search_results_table.getModel();
        searchTableModel.removeRow(rowIndex);
    
        // Hide the search_results_table if there are no more rows
        if (searchTableModel.getRowCount() == 0) {
            search_results_table.setVisible(false);
        }
    }

}



        
    private void search_lab3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_lab3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_search_lab3ActionPerformed

    private void search_lab4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_lab4KeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_search_lab4KeyReleased

    private void jMenu11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu11ActionPerformed
        // TODO add your handling code here:
        dispose();
        new Billing().setVisible(true);
    }//GEN-LAST:event_jMenu11ActionPerformed

    private void receipt_noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receipt_noActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receipt_noActionPerformed

    private void billing_patientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billing_patientsMouseClicked
        // TODO add your handling code here:
    int selectedRow = billing_patients.getSelectedRow();
    if (selectedRow >= 0) {
        String patNo = billing_patients.getValueAt(selectedRow, 0).toString();
        String patName = billing_patients.getValueAt(selectedRow, 1).toString();
        String paymode = billing_patients.getValueAt(selectedRow, 12).toString();
        String phone = billing_patients.getValueAt(selectedRow, 10).toString();
        pat_no_txt.setText(patNo);
        pat_name_txt.setText(patName);
        pay_mode.setText(paymode);
        phone_no.setText(phone);
        
        System.out.println("Selected patient number: " + patNo);
        
        // Switch to the second tab
        jTabbedPane1.setSelectedIndex(1); // Assuming the second tab index is 1 (zero-based indexing)
    }
    }//GEN-LAST:event_billing_patientsMouseClicked

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        dispose();
        new Billing().setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       DefaultTableModel model = (DefaultTableModel) billing_table.getModel();
    int rowCount = model.getRowCount();

    try {
        Class.forName("org.postgresql.Driver");
        Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "kanyingi254");

        String query = "INSERT INTO public.billed_patients(patient_no, patient_name, payment_mode, receipt_no, shift_no, service_code, service, fee, cashier, date, time) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement statement = conn.prepareStatement(query);

        String patientNo = pat_no_txt.getText();
        String patientName = pat_name_txt.getText();
        String paymentMode = pay_mode.getText();
        String receiptNo = receipt_no.getText();
        String shiftNo = shift_no.getText();
        String date = date_txt.getText();
        String time = time_txt.getText();
        String cashier = persona.getText();

        for (int row = 0; row < rowCount; row++) {
            String serviceCode = model.getValueAt(row, 0) != null ? model.getValueAt(row, 0).toString() : "";
            String service = model.getValueAt(row, 1) != null ? model.getValueAt(row, 1).toString() : "";
            double fee = 0.0;

            if (model.getValueAt(row, 2) != null && !model.getValueAt(row, 2).toString().isEmpty()) {
                try {
                    fee = Double.parseDouble(model.getValueAt(row, 2).toString());
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            } else {
                // Set a default value for fee
                fee = 0.0;
            }

            // Add a check on the service column
            if (service.isEmpty()) {
                continue; // Skip this row if the service is empty
            }

            statement.setString(1, patientNo);
            statement.setString(2, patientName);
            statement.setString(3, paymentMode);
            statement.setString(4, receiptNo);
            statement.setString(5, shiftNo);
            statement.setString(6, serviceCode);
            statement.setString(7, service);
            statement.setDouble(8, fee);
            statement.setString(9, cashier); // Replace with the actual cashier value
            statement.setString(10, date);
            statement.setString(11, time);

            statement.executeUpdate();
        }

        statement.close();
        conn.close();


        System.out.println("Data inserted successfully.");

        // Clear the fields after successful data insertion
        pat_no_txt.setText("");
        pat_name_txt.setText("");
        pay_mode.setText("");
        receipt_no.setText("");
        //shift_no.setText("");

        // Clear the billing_table
        model.setRowCount(0);

        JOptionPane.showMessageDialog(this, "Items Billed Successfully.", "Bill Items", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        e.printStackTrace();
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Billing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billing_patients;
    private javax.swing.JTable billing_table;
    private javax.swing.JLabel date_txt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField pat_name_txt;
    private javax.swing.JTextField pat_no_txt;
    private javax.swing.JTextField pay_mode;
    private javax.swing.JLabel persona;
    private javax.swing.JTextField phone_no;
    private javax.swing.JTextField receipt_no;
    private javax.swing.JTextField search_lab2;
    private javax.swing.JTextField search_lab3;
    private javax.swing.JTextField search_lab4;
    private javax.swing.JTextField shift_no;
    private javax.swing.JLabel time_txt;
    // End of variables declaration//GEN-END:variables
}
