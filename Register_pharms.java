/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.hmis;

import com.toedter.calendar.JDateChooser;
import java.awt.Component;
import java.awt.Container;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

import com.toedter.calendar.JDateChooser;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;



/**
 *
 * @author user
 */
public class Register_pharms extends javax.swing.JFrame {

    /**
     * Creates new form Register_pharms
     */
   private DefaultTableModel tableModel;
    private DefaultTableModel extraTableModel;
   // private JTable receive_pharm;
    private JTable extraTable;
  //  private JScrollPane jScrollPane2;
    private Container container; // Container reference for setting z-order

    public Register_pharms() {
        initComponents();

        // Create the table model
        /*tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                boolean editable = column == 0 || column == 5 || column == 6;
                System.out.println("isCellEditable - row: " + row + ", column: " + column + ", editable: " + editable);
                return editable;
            }
        };

        // Set the column names
        tableModel.setColumnIdentifiers(new Object[]{"Code", "Drug Name", "Price", "Strength", "Units", "Expiry Date", "Quantity"});

        // Set the table model
        receive_pharms.setModel(tableModel);

        // Set the cell selection mode
        receive_pharms.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        // Attach the mouse clicked event handler to the table
        receive_pharms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receive_pharmsMouseClicked(evt);
            }
        });

        // Get the container reference where the tables are added
        container = jScrollPane2; // Replace jPanel2 with the appropriate container reference

        // Add the receive_pharms table to the container
        jScrollPane2.setViewportView(receive_pharms);

        // Create the extra table model
        extraTableModel = new DefaultTableModel();

        // Set the column names for the extra table
        extraTableModel.setColumnIdentifiers(new Object[]{"Expiry Date", "Quantity"});

        // Create the extra table
        extraTable = new JTable(extraTableModel);*/

        // Add the extra table to the container
        //container.setRowHeaderView(extraTable);
    }





    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        register_pharm_tb = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        pharm_store = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        receive_pharms = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        issuing_store = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        delivery_txt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        supplier_txt = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        receive_date = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        register_pharm_tb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CODE", "NAME", "PRICE", "STRENGTH", "UNIT(s) PER PACK "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(register_pharm_tb);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setText("EDIT");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton2, gridBagConstraints);

        jButton3.setText("DELETE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jButton3, gridBagConstraints);

        jLabel3.setText("Select Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jLabel3, gridBagConstraints);

        pharm_store.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "DRUG STORE", "Outpatient Pharmacy" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(pharm_store, gridBagConstraints);

        jTabbedPane1.addTab("Register Pharmaceutical", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        receive_pharms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "CODE", "NAME", "PRICE", "STRENGTH", "UNIT(s) PER PACK ", "QUANTITY", "EXPIRY DATE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        receive_pharms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receive_pharmsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                receive_pharmsMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(receive_pharms);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jLabel5.setText("Delivery Note Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel5, gridBagConstraints);

        issuing_store.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "DRUG STORE", "Outpatient Pharmacy" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(issuing_store, gridBagConstraints);

        jLabel6.setText("Issuing Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(delivery_txt, gridBagConstraints);

        jLabel7.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Received From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(supplier_txt, gridBagConstraints);

        jTextField3.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jTextField3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(receive_date, gridBagConstraints);

        jButton4.setText("SAVE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jButton4, gridBagConstraints);

        jButton5.setText("SEARCH");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jButton5, gridBagConstraints);

        jTabbedPane1.addTab("Receive Pharmaceutical", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        jMenu6.setText("Setup");

        jMenu7.setText("Staff Registry");

        jMenuItem8.setText("Add User");
        jMenu7.add(jMenuItem8);

        jMenuItem9.setText("Edit User");
        jMenu7.add(jMenuItem9);

        jMenu6.add(jMenu7);

        jMenu8.setText("Operating Parameters");

        jMenuItem7.setText("Pharmacy");
        jMenu8.add(jMenuItem7);

        jMenu9.setText("Laboratory");
        jMenu8.add(jMenu9);

        jMenu6.add(jMenu8);

        jMenu10.setText("Exit");
        jMenu6.add(jMenu10);

        jMenuBar1.add(jMenu6);

        jMenu1.setText("Registration");

        jMenuItem2.setText("Out Patient Registration");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Nursing");

        jMenuItem1.setText("Nursing Center");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Clinical");

        jMenuItem3.setText("Clerking");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Eye");
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Laboratory");

        jMenuItem6.setText("Laboratory LIMS");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        jMenu11.setText("Billing");

        jMenuItem10.setText("Cash Sale POS");
        jMenu11.add(jMenuItem10);

        jMenuItem11.setText("Dispense Drugs");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem11);

        jMenuBar1.add(jMenu11);

        jMenu5.setText("Reports");

        jMenuItem5.setText("Patient Card");
        jMenu5.add(jMenuItem5);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        Clerking rgf = new Clerking();
        rgf.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        dispose();
        new Clerking().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        dispose();
        new lab().setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
try {
    // Retrieve the data from the JTable
    DefaultTableModel model = (DefaultTableModel) register_pharm_tb.getModel();
    int rowCount = register_pharm_tb.getRowCount();
    int columnCount = register_pharm_tb.getColumnCount();
    int visibleRowCount = 0;

    // Iterate through the rows and count only the visible ones
    for (int i = 0; i < rowCount; i++) {
        boolean isVisible = false;
        for (int j = 0; j < columnCount; j++) {
            Object value = register_pharm_tb.getValueAt(i, j);
            if (value != null && !value.toString().isEmpty()) {
                isVisible = true;
                break;
            }
        }
        if (isVisible) {
            visibleRowCount++;
        }
    }

    // Establish a connection to the PostgreSQL database
    Class.forName("org.postgresql.Driver");
    java.sql.Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "kanyingi254");

    // Prepare the SQL statement for insertion
    String insertSql = "INSERT INTO public.registered_pharms (store, code, drug_name, price, strength, units) VALUES (?, ?, ?, ?, ?, ?);";
    PreparedStatement pstmt = conn.prepareStatement(insertSql);

    // Loop through each visible row in the JTable
    for (int i = 0; i < visibleRowCount; i++) {
        // Retrieve values from the JTable and check for null
        String col1Value = pharm_store.getSelectedItem().toString(); // Value from the pharm_store combo box
        String col2Value = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
        String col3Value = model.getColumnCount() > 1 && model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
        String col4Value = model.getColumnCount() > 2 && model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
        String col5Value = model.getColumnCount() > 3 && model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
        String col6Value = model.getColumnCount() > 4 && model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";

        // Set the values in the SQL statement
        pstmt.setString(1, col1Value);
        pstmt.setString(2, col2Value);
        pstmt.setString(3, col3Value);
        pstmt.setString(4, col4Value);
        pstmt.setString(5, col5Value);
        pstmt.setString(6, col6Value);

        // Execute the SQL statement for insertion
        pstmt.executeUpdate();
    }

    // Check if the rows were inserted successfully
    JOptionPane.showMessageDialog(null, "Data inserted successfully.");

    // Clear the table model
    model.setRowCount(0);

    // Reset the JComboBox selection
    pharm_store.setSelectedIndex(0);

    // Close the connection
    conn.close();
} catch (SQLException ex) {
    ex.printStackTrace();
} catch (ClassNotFoundException ex) {
    Logger.getLogger(parameter_lab.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_jButton1ActionPerformed

  /* private void clearTable(DefaultTableModel model) {
        // Clear previous rows before populating new ones
        model.setRowCount(0);
    }

    private void populateTable(DefaultTableModel model, ResultSet rs) throws SQLException {
        while (rs.next()) {
            String code = rs.getString("code");
            String drugName = rs.getString("drug_name");
            double price = rs.getDouble("price");
            String strength = rs.getString("strength");
            String units = rs.getString("units");

            model.addRow(new Object[]{code, drugName, price, strength, units});
        }
    }

private void searchAndPopulateTable(String codeValue) {
    try {
        Class.forName("org.postgresql.Driver");
        java.sql.Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "kanyingi254");

        String searchSql = "SELECT code, drug_name, price, strength, units FROM public.registered_pharms WHERE drug_name = ?";
        PreparedStatement pstmt = conn.prepareStatement(searchSql);
        pstmt.setString(1, codeValue);

        ResultSet rs = pstmt.executeQuery();

        // Clear previous rows before populating new ones
        clearTable(tableModel);

        // Populate the table with the search results
        populateTable(tableModel, rs);

        // Close the result set, statement, and connection
        rs.close();
        pstmt.close();
        conn.close();

    } catch (SQLException ex) {
        ex.printStackTrace();
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(Register_pharms.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private class DateCellEditor extends AbstractCellEditor implements TableCellEditor {
    private JDateChooser dateChooser;

    public DateCellEditor() {
        dateChooser = new JDateChooser();
    }

    @Override
    public Object getCellEditorValue() {
        return dateChooser.getDate();
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        Date date = (Date) value;
        dateChooser.setDate(date);
        return dateChooser;
    }
}*/

    // Declare a member variable to store the selected code value
    private String selectedCodeValue = "";

    private void receive_pharmsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receive_pharmsMouseClicked
        // TODO add your handling code here:
        // Check if the click is on the first column (index 0)
            int columnIndex = receive_pharms.getSelectedColumn();
    // Check if the click is on the first column (index 0)
    if (columnIndex == 0) {
        DefaultTableModel model = (DefaultTableModel) receive_pharms.getModel();
        int rowIndex = receive_pharms.getSelectedRow();
        Object selectedValue = model.getValueAt(rowIndex, columnIndex);
        if (selectedValue != null) {
            selectedCodeValue = selectedValue.toString();
        }
    }
   /* int selectedRow = receive_pharms.getSelectedRow();
int columnIndex = receive_pharms.getSelectedColumn();

    if (selectedRow != -1) {
    if (columnIndex == 0) {
        // Populate the table with the search results
        String codeValue = receive_pharms.getValueAt(selectedRow, 0).toString();
        searchAndPopulateTable(codeValue);

            // Enable editing for the "Expiry Date" and "Quantity" columns
            TableColumn expiryColumn = receive_pharms.getColumnModel().getColumn(5);
            System.out.println("Setting cell editor for expiryColumn");
            expiryColumn.setCellEditor(new DateCellEditor());

            TableColumn quantityColumn = receive_pharms.getColumnModel().getColumn(6);
            quantityColumn.setCellEditor(new DefaultCellEditor(new JTextField()));
        } else {
            // Handle the row selection
            System.out.println("Selected row: " + selectedRow);

            // Get the data from the selected row
            String code = receive_pharms.getValueAt(selectedRow, 0).toString();
            String drugName = receive_pharms.getValueAt(selectedRow, 1).toString();
            String price = receive_pharms.getValueAt(selectedRow, 2).toString();
            String strength = receive_pharms.getValueAt(selectedRow, 3).toString();
            String units = receive_pharms.getValueAt(selectedRow, 4).toString();
            String expiryDate = receive_pharms.getValueAt(selectedRow, 5).toString();
            String quantity = receive_pharms.getValueAt(selectedRow, 6).toString();

            // Print the data
            System.out.println("Selected Row Data:");
            System.out.println("Code: " + code);
            System.out.println("Drug Name: " + drugName);
            System.out.println("Price: " + price);
            System.out.println("Strength: " + strength);
            System.out.println("Units: " + units);
            System.out.println("Expiry Date: " + expiryDate);
            System.out.println("Quantity: " + quantity);
        }
    }*/
    }//GEN-LAST:event_receive_pharmsMouseClicked
    
// Move the search logic to a separate method
    private void receive_pharmsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receive_pharmsMouseReleased
        // TODO add your handling code here:
        
    
    }//GEN-LAST:event_receive_pharmsMouseReleased

    // Place this line in the initialization code or where you set up the initial table model
    DefaultTableModel model = new DefaultTableModel(new Object[]{"Code", "Drug Name", "Price", "Strength", "Units", "Expiry Date", "Quantity"}, 0);


    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
          DefaultTableModel model = (DefaultTableModel) receive_pharms.getModel();
    int rowCount = model.getRowCount();
    
    boolean isAnyRowPopulated = false;
    List<String> unpopulatedRows = new ArrayList<>();

    try {
        Class.forName("org.postgresql.Driver");
        java.sql.Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "kanyingi254");

        String searchSql = "SELECT code, drug_name, price, strength, units FROM public.registered_pharms WHERE drug_name ILIKE ?";
        PreparedStatement pstmt = conn.prepareStatement(searchSql);

        for (int row = 0; row < rowCount; row++) {
            Object rowValue = model.getValueAt(row, 0);
            if (rowValue != null) {
                String codeValue = rowValue.toString();
                
                // Set the search parameter to be case-insensitive
                pstmt.setString(1, codeValue.toLowerCase() + "%");
                ResultSet rs = pstmt.executeQuery();

                if (rs.next()) {
                    String drugName = rs.getString("drug_name");
                    double price = rs.getDouble("price");
                    String strength = rs.getString("strength");
                    String units = rs.getString("units");
                    String code = rs.getString("code");
                    model.setValueAt(code, row, 0);
                    model.setValueAt(drugName, row, 1);
                    model.setValueAt(price, row, 2);
                    model.setValueAt(strength, row, 3);
                    model.setValueAt(units, row, 4);
                    
                    isAnyRowPopulated = true;
                } else {
                    // Add the unpopulated row data to the list
                    unpopulatedRows.add(codeValue);
                }

                rs.close();
            }
        }

        pstmt.close();
        conn.close();
    } catch (SQLException ex) {
        ex.printStackTrace();
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(Register_pharms.class.getName()).log(Level.SEVERE, null, ex);
    }

    // Update the table model
    receive_pharms.setModel(model);

    if (!isAnyRowPopulated) {
        String message = "No matching data found.";
        if (!unpopulatedRows.isEmpty()) {
            message += "\n\nThe following rows were not populated:";
            for (String row : unpopulatedRows) {
                message += "\n- " + row;
            }
        }
        JOptionPane.showMessageDialog(null, message, "Search Result", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
    // Retrieve the data from the JTable
    DefaultTableModel model = (DefaultTableModel) receive_pharms.getModel();
    int rowCount = receive_pharms.getRowCount();
    int columnCount = receive_pharms.getColumnCount();
    int visibleRowCount = 0;

    // Iterate through the rows and count only the visible ones
    for (int i = 0; i < rowCount; i++) {
        boolean isVisible = false;
        for (int j = 0; j < columnCount; j++) {
            Object value = receive_pharms.getValueAt(i, j);
            if (value != null && !value.toString().isEmpty()) {
                isVisible = true;
                break;
            }
        }
        if (isVisible) {
            visibleRowCount++;
        }
    }

    // Establish a connection to the PostgreSQL database
    Class.forName("org.postgresql.Driver");
    java.sql.Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "kanyingi254");

    // Prepare the SQL statement for insertion
    String insertSql = "INSERT INTO public.registered_pharms_balance (  code, drug_name, price, strength, units, quantity, expiry_date, store, receive_date, pharm_supplier, delivery_number ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
    PreparedStatement pstmt = conn.prepareStatement(insertSql);

    // Loop through each visible row in the JTable
    for (int i = 0; i < visibleRowCount; i++) {
        // Retrieve values from the JTable and check for null
        String col1Value = model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : "";
        String col2Value = model.getColumnCount() > 1 && model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : "";
        String col3Value = model.getColumnCount() > 2 && model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : "";
        String col4Value = model.getColumnCount() > 3 && model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : "";
        String col5Value = model.getColumnCount() > 4 && model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : "";
        String col6Value = model.getColumnCount() > 5 && model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : "";
        String col7Value = model.getColumnCount() > 6 && model.getValueAt(i, 6) != null ? model.getValueAt(i, 6).toString() : "";
        String col8Value = issuing_store.getSelectedItem().toString(); // Value from the pharm_store combo box
        // Format the date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        java.util.Date col9Value = receive_date.getDate();
        String formattedDate = dateFormat.format(col9Value);
        String col10Value = supplier_txt.getText();
        String col11Value = delivery_txt.getText();
        

        // Set the values in the SQL statement
        pstmt.setString(1, col1Value);
        pstmt.setString(2, col2Value);
        pstmt.setString(3, col3Value);
        pstmt.setString(4, col4Value);
        pstmt.setString(5, col5Value);
        pstmt.setString(6, col6Value);
        pstmt.setString(7, col7Value);
        pstmt.setString(8, col8Value);
        pstmt.setDate(9, java.sql.Date.valueOf(formattedDate));
        pstmt.setString(10, col10Value);
        pstmt.setString(11, col11Value);

        // Execute the SQL statement for insertion
        pstmt.executeUpdate();
    }

    // Check if the rows were inserted successfully
    JOptionPane.showMessageDialog(null, "Data inserted successfully.");

    // Clear the table model
    model.setRowCount(0);

        // Reset the JComboBox selection
    issuing_store.setSelectedIndex(0);

    // Reset the date format string of the receive_date component
    receive_date.setDateFormatString("");

    // Reset the text of the supplier_txt and delivery_txt components
    supplier_txt.setText("");
    delivery_txt.setText("");
    

    // Close the connection
    conn.close();
} catch (SQLException ex) {
    ex.printStackTrace();
} catch (ClassNotFoundException ex) {
    Logger.getLogger(Register_pharms.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        dispose();
        new dispense().setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register_pharms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register_pharms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register_pharms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register_pharms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register_pharms().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField delivery_txt;
    private javax.swing.JComboBox<String> issuing_store;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox<String> pharm_store;
    private com.toedter.calendar.JDateChooser receive_date;
    private javax.swing.JTable receive_pharms;
    private javax.swing.JTable register_pharm_tb;
    private javax.swing.JTextField supplier_txt;
    // End of variables declaration//GEN-END:variables
}
